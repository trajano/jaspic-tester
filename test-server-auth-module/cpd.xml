<?xml version="1.0" encoding="utf-8"?>
<pmd-cpd>
   <duplication lines="171" tokens="479">
      <file line="290"
            path="/var/lib/jenkins/jobs/jaspic-tester/workspace/test-server-auth-module/src/main/java/net/trajano/auth/TestServerAuthModule.java"/>
      <file line="323"
            path="/var/lib/jenkins/jobs/jaspic-tester/workspace/test-server-auth-module/src/main/java/net/trajano/auth/session/TestServerAuthModule.java"/>
      <codefragment><![CDATA[            URLEncoder.encode(stateBuilder.toString(), "US-ASCII"));
        resp.sendRedirect(URI.create(redirectUriBuilder.toString()).normalize().toASCIIString());

        // The JASPIC spec is ambiguous for this scenario, however
        // SEND_SUCCESS works on the top three application servers.

        return AuthStatus.SEND_SUCCESS;
    }

    /**
     * Callback handler that is passed in initialize by the container. This
     * processes the callbacks which are objects that populate the "subject".
     */
    private CallbackHandler handler;

    /**
     * Mandatory flag.
     */
    private boolean mandatory;

    /**
     * Removes the <code>authenticated</code> group and the user ID from the
     * principal set.
     *
     * @param messageInfo
     *            message info
     * @param subject
     *            subject
     */
    @Override
    public void cleanSubject(final MessageInfo messageInfo,
        final Subject subject) throws AuthException {

        final HttpServletRequest req = (HttpServletRequest) messageInfo.getRequestMessage();
        final String subjectCookie = getSubject(req);

        final Iterator<Principal> iterator = subject.getPrincipals().iterator();
        while (iterator.hasNext()) {
            final Principal principal = iterator.next();
            if ("authenticated".equals(principal.getName())) {
                iterator.remove();
            }
            if (principal.getName().equals(subjectCookie)) {
                iterator.remove();
            }
        }
        // Does nothing.
    }

    /**
     * <p>
     * Supported message types. For our case we only need to deal with HTTP
     * servlet request and responses. On Java EE 7 this will handle WebSockets
     * as well.
     * </p>
     * <p>
     * This creates a new array for security at the expense of performance.
     * </p>
     *
     * @return {@link HttpServletRequest} and {@link HttpServletResponse}
     *         classes.
     */
    @SuppressWarnings("rawtypes")
    @Override
    public Class[] getSupportedMessageTypes() {

        return new Class<?>[] {
            HttpServletRequest.class,
            HttpServletResponse.class
        };
    }

    /**
     * {@inheritDoc}
     *
     * @param requestPolicy
     *            request policy, ignored
     * @param responsePolicy
     *            response policy, ignored
     * @param h
     *            callback handler
     * @param options
     *            options
     */
    @Override
    public void initialize(final MessagePolicy requestPolicy,
        final MessagePolicy responsePolicy,
        final CallbackHandler h,
        @SuppressWarnings("rawtypes") final Map options) throws AuthException {

        handler = h;
        mandatory = requestPolicy.isMandatory();
    }

    /**
     * Return {@link AuthStatus#SEND_SUCCESS}.
     *
     * @param messageInfo
     *            contains the request and response messages. At this point the
     *            response message is already committed so nothing can be
     *            changed.
     * @param subject
     *            subject.
     * @return {@link AuthStatus#SEND_SUCCESS}
     */
    @Override
    public AuthStatus secureResponse(final MessageInfo messageInfo,
        final Subject subject) throws AuthException {

        return AuthStatus.SEND_SUCCESS;
    }

    /**
     * <p>
     * Checks for the presence of the cookie, if it is present it will use that
     * as the subject if not it will redirect to a login screen.
     * </p>
     * {@inheritDoc}
     */
    @Override
    public AuthStatus validateRequest(final MessageInfo messageInfo,
        final Subject client,
        final Subject serviceSubject)
            throws AuthException {

        final HttpServletRequest req = (HttpServletRequest) messageInfo.getRequestMessage();
        final HttpServletResponse resp = (HttpServletResponse) messageInfo.getResponseMessage();
        try {

            final String localRequestUri = req.getRequestURI().substring(req.getContextPath().length());

            if (LOGIN_ENDPOINT.equals(localRequestUri)) {
                return handleLoginEndpoint(req, resp);
            }

            if (LOGOUT_ENDPOINT.equals(localRequestUri)) {
                return handleLogoutEndpoint(req, resp);
            }

            // Allow if authentication is not required.
            if (!mandatory) {
                return AuthStatus.SUCCESS;
            }

            // require SSL if mandatory
            if (!req.isSecure()) {
                resp.sendError(HttpURLConnection.HTTP_FORBIDDEN, "SSL Required");
                return AuthStatus.SEND_FAILURE;
            }

            final String subject = getSubject(req);

            // Check if there is no subject then redirect to login endpoint
            if (subject == null) {
                return handleRedirectToLoginEndpoint(req, resp);
            }

            handler.handle(new Callback[] {
                new CallerPrincipalCallback(client, subject),
                new GroupPrincipalCallback(client, GROUPS)
            });
            return AuthStatus.SUCCESS;

        } catch (final IOException
            | ServletException
            | UnsupportedCallbackException e) {
            LOG.throwing(TestServerAuthModule.class.getName(), "validateRequest", e);
            throw new AuthException(e.getMessage());
        }
    }
}]]></codefragment>
   </duplication>
   <duplication lines="189" tokens="344">
      <file line="19"
            path="/var/lib/jenkins/jobs/jaspic-tester/workspace/test-server-auth-module/src/main/java/net/trajano/auth/TestServerAuthModuleAuthConfig.java"/>
      <file line="19"
            path="/var/lib/jenkins/jobs/jaspic-tester/workspace/test-server-auth-module/src/main/java/net/trajano/auth/session/TestServerAuthModuleAuthConfig.java"/>
      <codefragment><![CDATA[public class TestServerAuthModuleAuthConfig implements
    ServerAuthConfig {

    /**
     * <p>
     * The {@link javax.security.auth.message.MessageInfo} map must contain this
     * key and its associated value, if and only if authentication is required
     * to perform the resource access corresponding to the HttpServletRequest to
     * which the ServerAuthContext will be applied. Authentication is required
     * if use of the HTTP method of the HttpServletRequest at the resource
     * identified by the HttpServletRequest is covered by a Servlet auth
     * constraint, or in a JSR 115 compatible runtime, if the corresponding
     * WebResourcePermission is NOT granted to an unauthenticated caller. In a
     * JSR 115 compatible runtime, the corresponding WebResourcePermission may
     * be constructed directly from the HttpServletRequest as follows:
     * </p>
     * <blockquote> public WebResourcePermission(HttpServletRequest
     * request); </blockquote> *
     * <p>
     * The authentication context configuration system must use the value of
     * this property to establish the corresponding value within the
     * requestPolicy passed to the authentication modules of the
     * {@link javax.security.auth.message.config.ServerAuthContext} acquired to
     * process the {@link javax.security.auth.message.MessageInfo}.
     * </p>
     */
    private static final String JAVAX_SECURITY_AUTH_MESSAGE_MESSAGE_POLICY_IS_MANDATORY = "javax.security.auth.message.MessagePolicy.isMandatory";

    /**
     * Mandatory message policy.
     */
    protected static final MessagePolicy MANDATORY = new MessagePolicy(new TargetPolicy[0], true);

    /**
     * Non-mandatory message policy.
     */
    protected static final MessagePolicy NON_MANDATORY = new MessagePolicy(new TargetPolicy[0], false);

    /**
     * Application context.
     */
    private final String appContext;

    /**
     * Callback handler.
     */
    private final CallbackHandler handler;

    /**
     * Layer. Usually HttpServlet or SOAPMessage.
     */
    private final String layer;

    /**
     * Setup options.
     */
    private final Map<String, String> options;

    /**
     * Builds the config.
     *
     * @param options
     *            options
     * @param layer
     *            layer
     * @param appContext
     *            application context
     * @param handler
     *            callback handler
     */
    public TestServerAuthModuleAuthConfig(final Map<String, String> options,
        final String layer,
        final String appContext,
        final CallbackHandler handler) {

        this.appContext = appContext;
        this.layer = layer;
        this.options = options;
        this.handler = handler;
    }

    /**
     * Augments the properties with additional properties.
     *
     * @param properties
     *            properties to augment with.
     * @return augmented properties
     */
    @SuppressWarnings({
        "unchecked",
        "rawtypes"
    })
    protected Map augmentProperties(final Map properties) {

        if (properties == null) {
            return options;
        }
        final ConcurrentMap augmentedOptions = new ConcurrentHashMap(options);
        augmentedOptions.putAll(properties);
        return augmentedOptions;

    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String getAppContext() {

        return appContext;
    }

    /**
     * {@inheritDoc}
     * <p>
     * Augments the options with the properties specified and initializes the
     * module as mandatory or non-mandatory depending on whether the
     * authContextID is <code>null</code>.
     * </p>
     */
    @Override
    public ServerAuthContext getAuthContext(final String authContextID,
        final Subject serviceSubject,
        @SuppressWarnings("rawtypes") final Map properties) throws AuthException {

        @SuppressWarnings("rawtypes")
        final Map augmentedOptions = augmentProperties(properties);
        final TestServerAuthModule context = new TestServerAuthModule();

        if (authContextID == null) {
            context.initialize(NON_MANDATORY, NON_MANDATORY, handler, augmentedOptions);
        } else {
            context.initialize(MANDATORY, MANDATORY, handler, augmentedOptions);
        }
        return context;
    }

    /**
     * Checks for the presence of
     * {@value #JAVAX_SECURITY_AUTH_MESSAGE_MESSAGE_POLICY_IS_MANDATORY} in the
     * map.
     *
     * @param messageInfo
     *            contains the message request, response and some system
     *            populated map.
     * @return the string representation of the {@link MessageInfo} if it is
     *         mandatory, <code>null</code> otherwise.
     */
    @Override
    public String getAuthContextID(final MessageInfo messageInfo) {

        final Object isMandatory = messageInfo.getMap()
            .get(JAVAX_SECURITY_AUTH_MESSAGE_MESSAGE_POLICY_IS_MANDATORY);
        if (isMandatory != null && isMandatory instanceof String && Boolean.valueOf((String) isMandatory)) {
            return messageInfo.toString();
        }
        return null;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String getMessageLayer() {

        return layer;
    }

    /**
     * {@inheritDoc}
     *
     * @return <code>true</code>
     */
    @Override
    public boolean isProtected() {

        return true;
    }

    /**
     * Does nothing as the module does not accept changes at runtime.
     */
    @Override
    public void refresh() {

        // does nothing
    }

}]]></codefragment>
   </duplication>
   <duplication lines="43" tokens="135">
      <file line="110"
            path="/var/lib/jenkins/jobs/jaspic-tester/workspace/test-server-auth-module/src/main/java/net/trajano/auth/TestServerAuthModule.java"/>
      <file line="119"
            path="/var/lib/jenkins/jobs/jaspic-tester/workspace/test-server-auth-module/src/main/java/net/trajano/auth/session/TestServerAuthModule.java"/>
      <codefragment><![CDATA[    }

    /**
     * Handle the login endpoint. This will display the login page and will
     * handle login POST action.
     *
     * @param req
     *            request
     * @param resp
     *            response
     * @return authentication status
     * @throws AuthException
     *             happens when there is invalid request data
     * @throws IOException
     *             servlet error
     * @throws ServletException
     *             servlet error
     */
    private static AuthStatus handleLoginEndpoint(final HttpServletRequest req,
        final HttpServletResponse resp) throws ServletException,
            AuthException,
            IOException {

        if (!req.isSecure()) {
            throw new AuthException("Secure connection is required");
        }

        final String state = req.getParameter(STATE);
        if (state == null) {
            throw new AuthException("missing 'state' parameter");
        }

        // Ensure that the state is valid, it should be relative
        final URI stateUri = URI.create(state).normalize();
        if (stateUri.isAbsolute()) {
            throw new AuthException("'state' must not be an absolute URI");
        }
        if (!stateUri.getPath().startsWith("/")) {
            throw new AuthException("'state' must start with '/'");
        }
        if (stateUri.getPath().contains("/..")) {
            throw new AuthException("'state' must not resolve to a parent path");
        }]]></codefragment>
   </duplication>
   <duplication lines="68" tokens="126">
      <file line="16"
            path="/var/lib/jenkins/jobs/jaspic-tester/workspace/test-server-auth-module/src/main/java/net/trajano/auth/AuthModuleConfigProvider.java"/>
      <file line="16"
            path="/var/lib/jenkins/jobs/jaspic-tester/workspace/test-server-auth-module/src/main/java/net/trajano/auth/session/AuthModuleConfigProvider.java"/>
      <codefragment><![CDATA[public class AuthModuleConfigProvider implements
    AuthConfigProvider {

    /**
     * Options.
     */
    private final Map<String, String> options;

    /**
     * This is called by
     * {@link AuthConfigFactory#registerConfigProvider(String, Map, String, String, String)}
     * when registering the provider.
     *
     * @param options
     *            options to pass to the modules and the name of the module
     *            classes
     * @param factory
     *            configuration factory
     */
    public AuthModuleConfigProvider(final Map<String, String> options,
        final AuthConfigFactory factory) {

        this.options = options;
        if (factory != null) {
            factory.registerConfigProvider(this, null, null, "Auto registration");
        }
    }

    /**
     * <p>
     * Client authentication is not provided.
     * </p>
     * {@inheritDoc}
     *
     * @return <code>null</code>
     */
    @Override
    public ClientAuthConfig getClientAuthConfig(final String layer,
        final String appContext,
        final CallbackHandler handler) throws AuthException {

        return null;
    }

    /**
     * {@inheritDoc}
     *
     * @return {@link TestServerAuthModuleAuthConfig} with the data that was
     *         provided.
     */
    @Override
    public ServerAuthConfig getServerAuthConfig(final String layer,
        final String appContext,
        final CallbackHandler handler) throws AuthException {

        return new TestServerAuthModuleAuthConfig(options, layer, appContext, handler);
    }

    /**
     * Does nothing.
     */
    @Override
    public void refresh() {

        // does nothing
    }

}]]></codefragment>
   </duplication>
   <duplication lines="36" tokens="120">
      <file line="213"
            path="/var/lib/jenkins/jobs/jaspic-tester/workspace/test-server-auth-module/src/main/java/net/trajano/auth/TestServerAuthModule.java"/>
      <file line="238"
            path="/var/lib/jenkins/jobs/jaspic-tester/workspace/test-server-auth-module/src/main/java/net/trajano/auth/session/TestServerAuthModule.java"/>
      <codefragment><![CDATA[        resp.sendRedirect(URI.create(req.getContextPath() + stateUri.toASCIIString()).normalize().toASCIIString());
        return AuthStatus.SEND_SUCCESS;
    }

    /**
     * Handle the logout endpoint. This will clear the cookie and redirect to
     * the URI that has been specified.
     *
     * @param req
     *            request
     * @param resp
     *            response
     * @return authentication status
     * @throws AuthException
     *             happens when there is invalid request data
     * @throws IOException
     *             servlet error
     * @throws ServletException
     *             servlet error
     */
    private static AuthStatus handleLogoutEndpoint(final HttpServletRequest req,
        final HttpServletResponse resp) throws AuthException,
            ServletException,
            IOException {

        final String postLogoutRedirectUri = req.getParameter(POST_LOGOUT_REDIRECT_URI);
        if (postLogoutRedirectUri != null) {

            final String postLogoutRedirectUriNormalized = URI.create(postLogoutRedirectUri).normalize().toASCIIString();
            // Check that the post logout redirect uri is relative to the application if not fail.
            final String contextUri = URI.create(req.getRequestURL().toString()).resolve(req.getContextPath()).toASCIIString();
            if (!postLogoutRedirectUriNormalized.startsWith(contextUri)) {
                throw new AuthException("invalid post_logout_redirect_uri");
            }

            final Cookie cookie = new Cookie(SUBJECT_COOKIE_KEY, "");]]></codefragment>
   </duplication>
   <duplication lines="35" tokens="115">
      <file line="252"
            path="/var/lib/jenkins/jobs/jaspic-tester/workspace/test-server-auth-module/src/main/java/net/trajano/auth/TestServerAuthModule.java"/>
      <file line="278"
            path="/var/lib/jenkins/jobs/jaspic-tester/workspace/test-server-auth-module/src/main/java/net/trajano/auth/session/TestServerAuthModule.java"/>
      <codefragment><![CDATA[            resp.sendRedirect(postLogoutRedirectUriNormalized);
            return AuthStatus.SEND_SUCCESS;
        }
        throw new AuthException("missing post_logout_redirect_uri");
    }

    /**
     * Builds the redirect URI including the assembly of <code>state</code>.
     *
     * @param req
     *            servlet request
     * @param resp
     *            servlet response
     * @return {@link AuthStatus#SEND_SUCCESS}
     * @throws AuthException
     *             happens when there is invalid request data
     * @throws IOException
     *             servlet error
     * @throws ServletException
     *             servlet error
     */
    private static AuthStatus handleRedirectToLoginEndpoint(final HttpServletRequest req,
        final HttpServletResponse resp) throws AuthException,
            ServletException,
            IOException {

        if (!"GET".equals(req.getMethod())) {
            throw new AuthException("Only 'GET' method is supported when redirecting to the endpoint");
        }
        final StringBuilder stateBuilder = new StringBuilder(req.getRequestURI().substring(req.getContextPath().length()));
        if (req.getQueryString() != null) {
            stateBuilder.append('?');
            stateBuilder.append(req.getQueryString());
        }
        final StringBuilder redirectUriBuilder = new StringBuilder(req.getContextPath());]]></codefragment>
   </duplication>
</pmd-cpd>